#!/bin/bash
# Script de d√©ploiement ComfyUI RTX 4090 optimis√© pour vast.ai
# Version: 1.0

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="/workspace/setup.log"
COMFYUI_DIR="/workspace/ComfyUI"
IMAGE_NAME="ghcr.io/VOTRE_USERNAME/comfyui-docker-rtx4090:latest"

# Couleurs pour l'output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging avec timestamp et couleur
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")
            echo -e "${GREEN}[INFO]${NC} ${timestamp} - $message" | tee -a "$LOG_FILE"
            ;;
        "WARN")
            echo -e "${YELLOW}[WARN]${NC} ${timestamp} - $message" | tee -a "$LOG_FILE"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} ${timestamp} - $message" | tee -a "$LOG_FILE"
            ;;
        "DEBUG")
            echo -e "${BLUE}[DEBUG]${NC} ${timestamp} - $message" | tee -a "$LOG_FILE"
            ;;
    esac
}

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    log "INFO" "üîç V√©rification des pr√©requis syst√®me..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log "ERROR" "Docker n'est pas install√©"
        exit 1
    fi
    log "INFO" "‚úÖ Docker d√©tect√©: $(docker --version)"
    
    # V√©rifier nvidia-docker
    if ! docker info 2>/dev/null | grep -i nvidia &> /dev/null; then
        log "WARN" "nvidia-docker runtime peut ne pas √™tre configur√© correctement"
    else
        log "INFO" "‚úÖ nvidia-docker runtime configur√©"
    fi
    
    # V√©rifier GPU RTX 4090
    if command -v nvidia-smi &> /dev/null; then
        local gpu_info=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | head -n1)
        log "INFO" "GPU d√©tect√©: $gpu_info"
        
        if echo "$gpu_info" | grep -i "4090" &> /dev/null; then
            log "INFO" "‚úÖ RTX 4090 d√©tect√© - optimisations activ√©es"
        else
            log "WARN" "GPU non RTX 4090 d√©tect√© - les optimisations peuvent ne pas √™tre optimales"
        fi
        
        # Afficher les stats GPU
        log "INFO" "Stats GPU:"
        nvidia-smi --query-gpu=name,memory.total,driver_version --format=csv | tee -a "$LOG_FILE"
    else
        log "WARN" "nvidia-smi non disponible - impossible de v√©rifier le GPU"
    fi
}

# Fonction pour pr√©parer l'environnement
setup_environment() {
    log "INFO" "üèóÔ∏è  Pr√©paration de l'environnement..."
    
    # Cr√©er la structure de r√©pertoires
    mkdir -p /workspace/{models,output,input,logs,cache}
    mkdir -p /workspace/models/{checkpoints,vae,clip,controlnet,upscale_models}
    
    log "INFO" "‚úÖ R√©pertoires cr√©√©s"
    
    # Configurer les permissions
    chmod -R 755 /workspace
    log "INFO" "‚úÖ Permissions configur√©es"
}

# Fonction pour t√©l√©charger l'image si n√©cessaire
pull_image() {
    log "INFO" "üì• V√©rification de l'image Docker..."
    
    if docker images "$IMAGE_NAME" | grep -q "$IMAGE_NAME"; then
        log "INFO" "Image $IMAGE_NAME d√©j√† pr√©sente localement"
    else
        log "INFO" "T√©l√©chargement de l'image $IMAGE_NAME..."
        if docker pull "$IMAGE_NAME"; then
            log "INFO" "‚úÖ Image t√©l√©charg√©e avec succ√®s"
        else
            log "ERROR" "√âchec du t√©l√©chargement de l'image"
            exit 1
        fi
    fi
    
    # V√©rifier la taille de l'image
    local image_size=$(docker images --format "table {{.Size}}" "$IMAGE_NAME" | tail -n +2)
    log "INFO" "Taille de l'image: $image_size"
}

# Fonction pour arr√™ter les containers existants
stop_existing_containers() {
    log "INFO" "üõë Arr√™t des containers ComfyUI existants..."
    
    local existing_containers=$(docker ps -a --filter "name=comfyui" --format "{{.Names}}")
    
    if [ -n "$existing_containers" ]; then
        log "INFO" "Arr√™t des containers: $existing_containers"
        echo "$existing_containers" | xargs -r docker stop
        echo "$existing_containers" | xargs -r docker rm
        log "INFO" "‚úÖ Containers existants arr√™t√©s et supprim√©s"
    else
        log "INFO" "Aucun container ComfyUI existant trouv√©"
    fi
}

# Fonction pour d√©marrer ComfyUI
start_comfyui() {
    log "INFO" "üöÄ D√©marrage de ComfyUI optimis√© RTX 4090..."
    
    # Param√®tres de d√©marrage optimis√©s
    docker run -d \
        --name comfyui-vast \
        --gpus all \
        --restart unless-stopped \
        -p 8188:8188 \
        -e PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512 \
        -e CUDA_VISIBLE_DEVICES=0 \
        -e NVIDIA_VISIBLE_DEVICES=all \
        -e NVIDIA_DRIVER_CAPABILITIES=compute,utility \
        -v /workspace/models:/home/comfyui/ComfyUI/models \
        -v /workspace/output:/home/comfyui/ComfyUI/output \
        -v /workspace/input:/home/comfyui/ComfyUI/input \
        -v /workspace/logs:/home/comfyui/ComfyUI/logs \
        -v /workspace/cache:/home/comfyui/.cache \
        --shm-size=1g \
        --memory=30g \
        --memory-swap=30g \
        "$IMAGE_NAME"
    
    if [ $? -eq 0 ]; then
        log "INFO" "‚úÖ ComfyUI d√©marr√© avec succ√®s"
    else
        log "ERROR" "√âchec du d√©marrage de ComfyUI"
        exit 1
    fi
}

# Fonction de monitoring du d√©marrage
monitor_startup() {
    log "INFO" "üìä Monitoring du d√©marrage..."
    
    local max_wait=120  # 2 minutes
    local wait_time=0
    local interval=5
    
    while [ $wait_time -lt $max_wait ]; do
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:8188/ | grep -q "200"; then
            log "INFO" "‚úÖ ComfyUI est accessible sur http://localhost:8188/"
            break
        else
            log "DEBUG" "En attente du d√©marrage de ComfyUI... (${wait_time}s/${max_wait}s)"
            sleep $interval
            wait_time=$((wait_time + interval))
        fi
    done
    
    if [ $wait_time -ge $max_wait ]; then
        log "WARN" "Timeout atteint - v√©rifiez les logs du container"
        docker logs comfyui-vast --tail 20
    fi
}

# Fonction de v√©rification post-d√©ploiement
verify_deployment() {
    log "INFO" "üîç V√©rification du d√©ploiement..."
    
    # V√©rifier que le container tourne
    if docker ps | grep -q comfyui-vast; then
        log "INFO" "‚úÖ Container en cours d'ex√©cution"
    else
        log "ERROR" "‚ùå Container non trouv√©"
        return 1
    fi
    
    # V√©rifier l'utilisation GPU
    if command -v nvidia-smi &> /dev/null; then
        log "INFO" "Utilisation GPU:"
        nvidia-smi --query-gpu=utilization.gpu,memory.used,memory.total --format=csv,noheader,nounits | tee -a "$LOG_FILE"
    fi
    
    # Afficher les stats du container
    log "INFO" "Stats du container:"
    docker stats comfyui-vast --no-stream | tee -a "$LOG_FILE"
    
    # Tester l'endpoint
    if curl -s http://localhost:8188/ | grep -q "ComfyUI"; then
        log "INFO" "‚úÖ Interface web accessible"
    else
        log "WARN" "Interface web peut ne pas √™tre enti√®rement charg√©e"
    fi
}

# Fonction pour afficher les informations de connexion
show_connection_info() {
    log "INFO" "üåê Informations de connexion:"
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}üöÄ ComfyUI RTX 4090 Optimis√© - Pr√™t √† utiliser!${NC}"
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo
    echo -e "${YELLOW}üîó URL d'acc√®s:${NC}"
    echo -e "   Local: ${GREEN}http://localhost:8188/${NC}"
    echo -e "   Public: ${GREEN}http://$(curl -s ifconfig.me):8188/${NC}"
    echo
    echo -e "${YELLOW}üìÅ R√©pertoires:${NC}"
    echo -e "   Mod√®les: ${BLUE}/workspace/models/${NC}"
    echo -e "   Output: ${BLUE}/workspace/output/${NC}"
    echo -e "   Input: ${BLUE}/workspace/input/${NC}"
    echo -e "   Logs: ${BLUE}/workspace/logs/${NC}"
    echo
    echo -e "${YELLOW}üê≥ Container:${NC}"
    echo -e "   Nom: ${BLUE}comfyui-vast${NC}"
    echo -e "   Status: ${GREEN}$(docker inspect -f '{{.State.Status}}' comfyui-vast)${NC}"
    echo
    echo -e "${YELLOW}‚ö° Optimisations RTX 4090 actives:${NC}"
    echo -e "   ‚úÖ CUDA 12.8 + PyTorch optimis√©"
    echo -e "   ‚úÖ xFormers pour acc√©l√©ration m√©moire"
    echo -e "   ‚úÖ Extensions essentielles install√©es"
    echo -e "   ‚úÖ Monitoring GPU int√©gr√©"
    echo
    echo -e "${YELLOW}üìä Commandes utiles:${NC}"
    echo -e "   Logs: ${BLUE}docker logs -f comfyui-vast${NC}"
    echo -e "   Stats: ${BLUE}docker stats comfyui-vast${NC}"
    echo -e "   GPU: ${BLUE}nvidia-smi${NC}"
    echo -e "   Red√©marrer: ${BLUE}docker restart comfyui-vast${NC}"
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

# Fonction principale
main() {
    echo -e "${BLUE}üöÄ ComfyUI RTX 4090 - Script de d√©ploiement vast.ai${NC}"
    echo -e "${BLUE}Version 1.0${NC}"
    echo
    
    log "INFO" "D√©but du d√©ploiement..."
    
    # Initialisation du log
    echo "=== ComfyUI RTX 4090 Deployment Log ===" > "$LOG_FILE"
    echo "Started at: $(date)" >> "$LOG_FILE"
    
    # √âtapes de d√©ploiement
    check_prerequisites
    setup_environment
    pull_image
    stop_existing_containers
    start_comfyui
    monitor_startup
    verify_deployment
    show_connection_info
    
    log "INFO" "‚úÖ D√©ploiement termin√© avec succ√®s!"
    log "INFO" "üìã Logs complets disponibles dans: $LOG_FILE"
}

# Gestion des erreurs
trap 'log "ERROR" "Script interrompu √† la ligne $LINENO"' ERR

# Ex√©cution
main "$@"